{"version":3,"sources":["media/aaron.jpg","media/ch.jpg","media/calvin.jpg","media/danny.jpg","media/fyon.jpg","media/ian.jpg","media/matt.jpg","media/bg-video.mp4","media/giselle.jpg","components/friend.js","components/layout.js","components/bg.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Friend","prop","react_default","a","createElement","Card","CardImg","top","width","src","image","alt","CardBody","CardTitle","name","CardText","text","Layout","CardColumns","friend","Aaron","CH","Calvin","Danny","Fyon","Ian","Matt","BG","className","autoPlay","muted","loop","Video","type","App","layout","bg","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gLCmBzBC,EAdA,SAACC,GACZ,OAEIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,KAAG,EAACC,MAAM,OAAOC,IAAKR,EAAKS,MAAOC,IAAI,UAC/CT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KAAYZ,EAAKa,MACjBZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KAAWd,EAAKe,wICejBC,EAdA,WACX,OACIf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACIhB,EAAAC,EAAAC,cAACe,EAAD,CAAQL,KAAK,QAAQJ,MAAOU,IAAOJ,KAAK,qPACxCd,EAAAC,EAAAC,cAACe,EAAD,CAAQL,KAAK,YAAYJ,MAAOW,IAAIL,KAAK,uGACzCd,EAAAC,EAAAC,cAACe,EAAD,CAAQL,KAAK,SAASJ,MAAOY,IAAQN,KAAK,uGAC1Cd,EAAAC,EAAAC,cAACe,EAAD,CAAQL,KAAK,QAAQJ,MAAOa,IAAOP,KAAK,4HACxCd,EAAAC,EAAAC,cAACe,EAAD,CAAQL,KAAK,OAAOJ,MAAOc,IAAMR,KAAK,8EACtCd,EAAAC,EAAAC,cAACe,EAAD,CAAQL,KAAK,MAAMJ,MAAOe,IAAKT,KAAK,uIACpCd,EAAAC,EAAAC,cAACe,EAAD,CAAQL,KAAK,OAAOJ,MAAOgB,IAAMV,KAAK,0ICVnCW,EARJ,WACP,OAAQzB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,MACnB1B,EAAAC,EAAAC,cAAA,SAAOyB,UAAQ,EAACC,OAAK,EAACC,MAAI,EAACH,UAAU,SACjC1B,EAAAC,EAAAC,cAAA,UAAQK,IAAKuB,IAAOC,KAAK,iBCatBC,MAdf,WACE,OACEhC,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,UAAQwB,UAAU,cAChB1B,EAAAC,EAAAC,cAAA,4BAEFF,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,UACb1B,EAAAC,EAAAC,cAAC+B,EAAD,OAEFjC,EAAAC,EAAAC,cAACgC,EAAD,QCHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2329f49c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aaron.e2f89eff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ch.91427be1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/calvin.5e76e8ca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/danny.9ee85040.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fyon.e154dfe3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ian.8a1a2da4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/matt.129c2038.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg-video.a44350cb.mp4\";","module.exports = __webpack_public_path__ + \"static/media/giselle.50cb712d.jpg\";","import React from 'react';\r\nimport {\r\n    Card, CardImg, CardTitle, CardText, CardBody\r\n} from 'reactstrap';\r\n\r\nconst Friend = (prop) => {\r\n    return (\r\n\r\n        <Card>\r\n            <CardImg top width=\"100%\" src={prop.image} alt=\"Aaron\" />\r\n            <CardBody>\r\n                <CardTitle>{prop.name}</CardTitle>\r\n                <CardText>{prop.text}</CardText>\r\n            </CardBody>\r\n        </Card>\r\n\r\n    );\r\n};\r\n\r\nexport default Friend;","import React from 'react';\r\nimport { CardColumns } from 'reactstrap';\r\nimport Friend from './friend';\r\nimport Aaron from '../media/aaron.jpg';\r\nimport CH from '../media/ch.jpg';\r\nimport Calvin from '../media/calvin.jpg';\r\nimport Danny from '../media/danny.jpg';\r\nimport Fyon from '../media/fyon.jpg';\r\nimport Giselle from '../media/giselle.jpg';\r\nimport Ian from '../media/ian.jpg';\r\nimport Matt from '../media/matt.jpg';\r\n\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <CardColumns>\r\n            <Friend name=\"Aaron\" image={Aaron} text=\"Friends are the family that you get to choose. Your closest friends are your confidants, therapists, sidekicks and some of your biggest supporters. Make sure that they know however near or far they are, you’ll always be there for them.\" />\r\n            <Friend name=\"Chiau Hui\" image={CH} text=\"Goodbyes are not forever, are not the end; it simply means I’ll miss you until we meet again.\" />\r\n            <Friend name=\"Calvin\" image={Calvin} text=\"So long as the memory of certain beloved friends lives in my heart, I shall say that life is good.\" />\r\n            <Friend name=\"Danny\" image={Danny} text=\"Yesterday brought the beginning, tomorrow brings the end, though somewhere in the middle we became the best of friends.\" />\r\n            <Friend name=\"Fyon\" image={Fyon} text=\"Good friends never say goodbye. They simply say “See you soon.”\" />\r\n            <Friend name=\"Ian\" image={Ian} text=\"Though miles may lie between us, we are never far apart, for friendship doesn’t count miles, it’s measured by the heart.\" />\r\n            <Friend name=\"Matt\" image={Matt} text=\"Nothing makes the earth seem so spacious as to have friends at a distance; they make the latitudes and longitudes.\" />\r\n        </CardColumns>\r\n    );\r\n};\r\n\r\nexport default Layout;","import React from 'react';\r\nimport '../App.css';\r\nimport Video from '../media/bg-video.mp4';\r\n\r\nconst BG = () => {\r\n    return (<div className=\"bg\">\r\n        <video autoPlay muted loop className=\"video\">\r\n            <source src={Video} type=\"video/mp4\" />\r\n        </video>\r\n    </div>)\r\n}\r\n\r\nexport default BG;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Layout from './components/layout';\nimport BG from './components/bg';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Down the Road</h1>\n      </header>\n      <div className=\"layout\">\n        <Layout />\n      </div>\n      <BG />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}